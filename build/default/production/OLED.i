# 1 "OLED.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 288 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\language_support.h" 1 3
# 2 "<built-in>" 2
# 1 "OLED.c" 2

# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\builtins.h" 1 3



# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdint.h" 1 3



# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\musl_xc8.h" 1 3
# 5 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdint.h" 2 3
# 26 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdint.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 1 3
# 133 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef unsigned short uintptr_t;
# 148 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef short intptr_t;
# 164 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef signed char int8_t;




typedef short int16_t;




typedef __int24 int24_t;




typedef long int32_t;





typedef long long int64_t;
# 194 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef long long intmax_t;





typedef unsigned char uint8_t;




typedef unsigned short uint16_t;




typedef __uint24 uint24_t;




typedef unsigned long uint32_t;





typedef unsigned long long uint64_t;
# 235 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef unsigned long long uintmax_t;
# 27 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdint.h" 2 3

typedef int8_t int_fast8_t;

typedef int64_t int_fast64_t;


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;

typedef int24_t int_least24_t;
typedef int24_t int_fast24_t;

typedef int32_t int_least32_t;

typedef int64_t int_least64_t;


typedef uint8_t uint_fast8_t;

typedef uint64_t uint_fast64_t;


typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;

typedef uint24_t uint_least24_t;
typedef uint24_t uint_fast24_t;

typedef uint32_t uint_least32_t;

typedef uint64_t uint_least64_t;
# 148 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdint.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/stdint.h" 1 3
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
# 149 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdint.h" 2 3
# 4 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\builtins.h" 2 3



#pragma intrinsic(__nop)
extern void __nop(void);
# 19 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\builtins.h" 3
#pragma intrinsic(_delay)
extern __attribute__((nonreentrant)) void _delay(uint32_t);
#pragma intrinsic(_delaywdt)
extern __attribute__((nonreentrant)) void _delaywdt(uint32_t);

#pragma intrinsic(_delay3)
extern __attribute__((nonreentrant)) void _delay3(uint8_t);
# 2 "OLED.c" 2

# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdio.h" 1 3
# 10 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdio.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\features.h" 1 3
# 11 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdio.h" 2 3
# 24 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdio.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 1 3
# 12 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef void * va_list[1];




typedef void * __isoc_va_list[1];
# 128 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef unsigned size_t;
# 143 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef short ssize_t;
# 255 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef long long off_t;
# 409 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef struct _IO_FILE FILE;
# 25 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdio.h" 2 3
# 52 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\stdio.h" 3
typedef union _G_fpos64_t {
 char __opaque[16];
 double __align;
} fpos_t;

extern FILE *const stdin;
extern FILE *const stdout;
extern FILE *const stderr;





FILE *fopen(const char *restrict, const char *restrict);
FILE *freopen(const char *restrict, const char *restrict, FILE *restrict);
int fclose(FILE *);

int remove(const char *);
int rename(const char *, const char *);

int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
void clearerr(FILE *);

int fseek(FILE *, long, int);
long ftell(FILE *);
void rewind(FILE *);

int fgetpos(FILE *restrict, fpos_t *restrict);
int fsetpos(FILE *, const fpos_t *);

size_t fread(void *restrict, size_t, size_t, FILE *restrict);
size_t fwrite(const void *restrict, size_t, size_t, FILE *restrict);

int fgetc(FILE *);
int getc(FILE *);
int getchar(void);





int ungetc(int, FILE *);
int getch(void);

int fputc(int, FILE *);
int putc(int, FILE *);
int putchar(int);





void putch(char);

char *fgets(char *restrict, int, FILE *restrict);

char *gets(char *);


int fputs(const char *restrict, FILE *restrict);
int puts(const char *);

__attribute__((__format__(__printf__, 1, 2)))
int printf(const char *restrict, ...);
__attribute__((__format__(__printf__, 2, 3)))
int fprintf(FILE *restrict, const char *restrict, ...);
__attribute__((__format__(__printf__, 2, 3)))
int sprintf(char *restrict, const char *restrict, ...);
__attribute__((__format__(__printf__, 3, 4)))
int snprintf(char *restrict, size_t, const char *restrict, ...);

__attribute__((__format__(__printf__, 1, 0)))
int vprintf(const char *restrict, __isoc_va_list);
int vfprintf(FILE *restrict, const char *restrict, __isoc_va_list);
__attribute__((__format__(__printf__, 2, 0)))
int vsprintf(char *restrict, const char *restrict, __isoc_va_list);
__attribute__((__format__(__printf__, 3, 0)))
int vsnprintf(char *restrict, size_t, const char *restrict, __isoc_va_list);

__attribute__((__format__(__scanf__, 1, 2)))
int scanf(const char *restrict, ...);
__attribute__((__format__(__scanf__, 2, 3)))
int fscanf(FILE *restrict, const char *restrict, ...);
__attribute__((__format__(__scanf__, 2, 3)))
int sscanf(const char *restrict, const char *restrict, ...);

__attribute__((__format__(__scanf__, 1, 0)))
int vscanf(const char *restrict, __isoc_va_list);
int vfscanf(FILE *restrict, const char *restrict, __isoc_va_list);
__attribute__((__format__(__scanf__, 2, 0)))
int vsscanf(const char *restrict, const char *restrict, __isoc_va_list);

void perror(const char *);

int setvbuf(FILE *restrict, char *restrict, int, size_t);
void setbuf(FILE *restrict, char *restrict);

char *tmpnam(char *);
FILE *tmpfile(void);




FILE *fmemopen(void *restrict, size_t, const char *restrict);
FILE *open_memstream(char **, size_t *);
FILE *fdopen(int, const char *);
FILE *popen(const char *, const char *);
int pclose(FILE *);
int fileno(FILE *);
int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);
int dprintf(int, const char *restrict, ...);
int vdprintf(int, const char *restrict, __isoc_va_list);
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);
ssize_t getdelim(char **restrict, size_t *restrict, int, FILE *restrict);
ssize_t getline(char **restrict, size_t *restrict, FILE *restrict);
int renameat(int, const char *, int, const char *);
char *ctermid(char *);







char *tempnam(const char *, const char *);
# 3 "OLED.c" 2

# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\string.h" 1 3
# 25 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\string.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 1 3
# 421 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\bits/alltypes.h" 3
typedef struct __locale_struct * locale_t;
# 26 "C:\\Program Files\\Microchip\\xc8\\v2.46\\pic\\include\\c99\\string.h" 2 3

void *memcpy (void *restrict, const void *restrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void *memchr (const void *, int, size_t);

char *strcpy (char *restrict, const char *restrict);
char *strncpy (char *restrict, const char *restrict, size_t);

char *strcat (char *restrict, const char *restrict);
char *strncat (char *restrict, const char *restrict, size_t);

int strcmp (const char *, const char *);
int strncmp (const char *, const char *, size_t);

int strcoll (const char *, const char *);
size_t strxfrm (char *restrict, const char *restrict, size_t);

char *strchr (const char *, int);
char *strrchr (const char *, int);

size_t strcspn (const char *, const char *);
size_t strspn (const char *, const char *);
char *strpbrk (const char *, const char *);
char *strstr (const char *, const char *);
char *strtok (char *restrict, const char *restrict);

size_t strlen (const char *);

char *strerror (int);




char *strtok_r (char *restrict, const char *restrict, char **restrict);
int strerror_r (int, char *, size_t);
char *stpcpy(char *restrict, const char *restrict);
char *stpncpy(char *restrict, const char *restrict, size_t);
size_t strnlen (const char *, size_t);
char *strdup (const char *);
char *strndup (const char *, size_t);
char *strsignal(int);
char *strerror_l (int, locale_t);
int strcoll_l (const char *, const char *, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);




void *memccpy (void *restrict, const void *restrict, int, size_t);
# 4 "OLED.c" 2


# 1 "./main.h" 1
# 6 "OLED.c" 2

# 1 "./i2c_2.h" 1
# 20 "./i2c_2.h"
void setup(void);
void I2C_Master_Init(const unsigned long c);
void I2C_Master_Wait(void);
void I2C_Master_Start(void);
void I2C_Master_Stop(void);
void I2C_Master_Write(uint8_t d);
uint8_t I2C_Master_Read(uint8_t a);
void I2C_Master_Write_Str(uint8_t* arg, uint8_t size);
# 7 "OLED.c" 2

# 1 "./OLED.h" 1
# 24 "./OLED.h"
extern const uint8_t SMALL_FONTS[];
extern const uint8_t TINY_FONTS[];
extern const uint8_t BIG_FONTS[];

typedef struct _Current_Font_s
{
  const uint8_t *font;
  uint8_t x_size;
  uint8_t y_size;
  uint8_t offset;
  uint8_t numchars;
  uint8_t inverted;
} Current_Font_s;
# 110 "./OLED.h"
void OLED_Init( void );
uint8_t OLED_Width( void );
uint8_t OLED_Height( void );
void OLED_Update( void );
void OLED_SetContrast( uint8_t contrast );
void OLED_ClearDisplay( void );
void OLED_FillDisplay( void );
void OLED_DrawPixel( int16_t x, int16_t y, uint8_t color );
void OLED_InvertDisplay( uint8_t value );
void OLED_SetFont( const uint8_t *font);
void OLED_InvertFont( uint8_t invert_status );
void OLED_Line( int16_t x_start, int16_t y_start, int16_t x_end, int16_t y_end, uint8_t color);
void OLED_V_Line( int16_t y_start, int16_t y_end, int16_t x_pos, uint8_t color);
void OLED_H_Line( int16_t x_start, int16_t x_end, int16_t y_pos, uint8_t color);
void OLED_Rectangle( int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color);
void OLED_FillRectangle( int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color);
void OLED_Triangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color);
void OLED_Circle( int16_t x_center, int16_t y_center, int16_t radius, uint8_t color);
void OLED_Image( const uint8_t *image );
void OLED_Write( int16_t x, int16_t y, char value );
void OLED_Write_Text( int16_t x, int16_t y, char *text);
# 8 "OLED.c" 2



const uint8_t SMALL_FONTS[] =
{
    0x06, 0x08, 0x20, 0x5f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,
    0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
    0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14,
    0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12,
    0x00, 0x23, 0x13, 0x08, 0x64, 0x62,
    0x00, 0x36, 0x49, 0x55, 0x22, 0x50,
    0x00, 0x00, 0x05, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x1c, 0x22, 0x41, 0x00,
    0x00, 0x00, 0x41, 0x22, 0x1c, 0x00,
    0x00, 0x14, 0x08, 0x3E, 0x08, 0x14,
    0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,
    0x00, 0x00, 0x00, 0xA0, 0x60, 0x00,
    0x00, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x00, 0x00, 0x60, 0x60, 0x00, 0x00,
    0x00, 0x20, 0x10, 0x08, 0x04, 0x02,

    0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,
    0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,
    0x00, 0x42, 0x61, 0x51, 0x49, 0x46,
    0x00, 0x21, 0x41, 0x45, 0x4B, 0x31,
    0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,
    0x00, 0x27, 0x45, 0x45, 0x45, 0x39,
    0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,
    0x00, 0x01, 0x71, 0x09, 0x05, 0x03,
    0x00, 0x36, 0x49, 0x49, 0x49, 0x36,
    0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,
    0x00, 0x00, 0x36, 0x36, 0x00, 0x00,
    0x00, 0x00, 0x56, 0x36, 0x00, 0x00,
    0x00, 0x08, 0x14, 0x22, 0x41, 0x00,
    0x00, 0x14, 0x14, 0x14, 0x14, 0x14,
    0x00, 0x00, 0x41, 0x22, 0x14, 0x08,
    0x00, 0x02, 0x01, 0x51, 0x09, 0x06,

    0x00, 0x32, 0x49, 0x59, 0x51, 0x3E,
    0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C,
    0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,
    0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,
    0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C,
    0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,
    0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,
    0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,
    0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,
    0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,
    0x00, 0x20, 0x40, 0x41, 0x3F, 0x01,
    0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,
    0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F,
    0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F,
    0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,

    0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,
    0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,
    0x00, 0x7F, 0x09, 0x19, 0x29, 0x46,
    0x00, 0x46, 0x49, 0x49, 0x49, 0x31,
    0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,
    0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,
    0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,
    0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F,
    0x00, 0x63, 0x14, 0x08, 0x14, 0x63,
    0x00, 0x07, 0x08, 0x70, 0x08, 0x07,
    0x00, 0x61, 0x51, 0x49, 0x45, 0x43,
    0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,
    0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
    0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,
    0x00, 0x04, 0x02, 0x01, 0x02, 0x04,
    0x00, 0x40, 0x40, 0x40, 0x40, 0x40,

    0x00, 0x00, 0x03, 0x05, 0x00, 0x00,
    0x00, 0x20, 0x54, 0x54, 0x54, 0x78,
    0x00, 0x7F, 0x48, 0x44, 0x44, 0x38,
    0x00, 0x38, 0x44, 0x44, 0x44, 0x20,
    0x00, 0x38, 0x44, 0x44, 0x48, 0x7F,
    0x00, 0x38, 0x54, 0x54, 0x54, 0x18,
    0x00, 0x08, 0x7E, 0x09, 0x01, 0x02,
    0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,
    0x00, 0x7F, 0x08, 0x04, 0x04, 0x78,
    0x00, 0x00, 0x44, 0x7D, 0x40, 0x00,
    0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,
    0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,
    0x00, 0x00, 0x41, 0x7F, 0x40, 0x00,
    0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,
    0x00, 0x7C, 0x08, 0x04, 0x04, 0x78,
    0x00, 0x38, 0x44, 0x44, 0x44, 0x38,

    0x00, 0xFC, 0x24, 0x24, 0x24, 0x18,
    0x00, 0x18, 0x24, 0x24, 0x18, 0xFC,
    0x00, 0x7C, 0x08, 0x04, 0x04, 0x08,
    0x00, 0x48, 0x54, 0x54, 0x54, 0x20,
    0x00, 0x04, 0x3F, 0x44, 0x40, 0x20,
    0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C,
    0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,
    0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C,
    0x00, 0x44, 0x28, 0x10, 0x28, 0x44,
    0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C,
    0x00, 0x44, 0x64, 0x54, 0x4C, 0x44,
    0x00, 0x00, 0x10, 0x7C, 0x82, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
    0x00, 0x00, 0x82, 0x7C, 0x10, 0x00,
    0x00, 0x00, 0x06, 0x09, 0x09, 0x06
};

const uint8_t TINY_FONTS[] =
{
    0x04, 0x06, 0x20, 0x5f,
    0x00, 0x00, 0x00, 0x03, 0xa0, 0x00, 0xc0, 0x0c, 0x00, 0xf9, 0x4f, 0x80, 0x6b, 0xeb, 0x00, 0x98, 0x8c, 0x80, 0x52, 0xa5, 0x80, 0x03, 0x00, 0x00,
    0x01, 0xc8, 0x80, 0x89, 0xc0, 0x00, 0x50, 0x85, 0x00, 0x21, 0xc2, 0x00, 0x08, 0x40, 0x00, 0x20, 0x82, 0x00, 0x00, 0x20, 0x00, 0x18, 0x8c, 0x00,
    0xfa, 0x2f, 0x80, 0x4b, 0xe0, 0x80, 0x5a, 0x66, 0x80, 0x8a, 0xa5, 0x00, 0xe0, 0x8f, 0x80, 0xea, 0xab, 0x00, 0x72, 0xa9, 0x00, 0x9a, 0x8c, 0x00,
    0xfa, 0xaf, 0x80, 0x4a, 0xa7, 0x00, 0x01, 0x40, 0x00, 0x09, 0x40, 0x00, 0x21, 0x48, 0x80, 0x51, 0x45, 0x00, 0x89, 0x42, 0x00, 0x42, 0x66, 0x00,
    0x72, 0xa6, 0x80, 0x7a, 0x87, 0x80, 0xfa, 0xa5, 0x00, 0x72, 0x25, 0x00, 0xfa, 0x27, 0x00, 0xfa, 0xa8, 0x80, 0xfa, 0x88, 0x00, 0x72, 0x2b, 0x00,
    0xf8, 0x8f, 0x80, 0x8b, 0xe8, 0x80, 0x8b, 0xe8, 0x00, 0xf8, 0x8d, 0x80, 0xf8, 0x20, 0x80, 0xf9, 0x0f, 0x80, 0xf9, 0xcf, 0x80, 0x72, 0x27, 0x00,
    0xfa, 0x84, 0x00, 0x72, 0x27, 0x40, 0xfa, 0x85, 0x80, 0x4a, 0xa9, 0x00, 0x83, 0xe8, 0x00, 0xf0, 0x2f, 0x00, 0xe0, 0x6e, 0x00, 0xf0, 0xef, 0x00,
    0xd8, 0x8d, 0x80, 0xc0, 0xec, 0x00, 0x9a, 0xac, 0x80, 0x03, 0xe8, 0x80, 0xc0, 0x81, 0x80, 0x8b, 0xe0, 0x00, 0x42, 0x04, 0x00, 0x08, 0x20, 0x80,
    0x02, 0x04, 0x00, 0x31, 0x23, 0x80, 0xf9, 0x23, 0x00, 0x31, 0x24, 0x80, 0x31, 0x2f, 0x80, 0x31, 0x62, 0x80, 0x23, 0xea, 0x00, 0x25, 0x53, 0x80,
    0xf9, 0x03, 0x80, 0x02, 0xe0, 0x00, 0x06, 0xe0, 0x00, 0xf8, 0x42, 0x80, 0x03, 0xe0, 0x00, 0x79, 0x87, 0x80, 0x39, 0x03, 0x80, 0x31, 0x23, 0x00,
    0x7d, 0x23, 0x00, 0x31, 0x27, 0xc0, 0x78, 0x84, 0x00, 0x29, 0x40, 0x00, 0x43, 0xe4, 0x00, 0x70, 0x27, 0x00, 0x60, 0x66, 0x00, 0x70, 0x67, 0x00,
    0x48, 0xc4, 0x80, 0x74, 0x57, 0x80, 0x59, 0xe6, 0x80, 0x23, 0xe8, 0x80, 0x03, 0x60, 0x00, 0x8b, 0xe2, 0x00, 0x61, 0x0c, 0x00
};

const uint8_t BIG_FONTS[] = {
    0x10,0x10,0x20,0x5F,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xF8,0xFC,0xFC,0xFC,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x73,0x73,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x1E,0x3E,0x3E,0x00,0x00,0x00,0x3E,0x3E,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x30,0x30,0x30,0xFE,0xFE,0x30,0x30,0x30,0x30,0xFE,0xFE,0x30,0x30,0x30,0x00,0x00,0x0C,0x0C,0x0C,0x7F,0x7F,0x0C,0x0C,0x0C,0x0C,0x7F,0x7F,0x0C,0x0C,0x0C,0x00,
    0x00,0x00,0x00,0xF0,0xF8,0x98,0xFE,0x98,0x98,0xFE,0x98,0x98,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x19,0x19,0x7F,0x19,0x19,0x7F,0x19,0x1F,0x0F,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x38,0x38,0x38,0x80,0xC0,0xE0,0x70,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x0E,0x07,0x03,0x01,0x1C,0x1C,0x1C,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x38,0xFC,0xC4,0xC4,0xFC,0x38,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3F,0x21,0x21,0x33,0x3F,0x1E,0x1E,0x37,0x23,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x20,0x3C,0x3C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xC0,0xE0,0xF0,0x38,0x1C,0x0C,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x07,0x0F,0x1C,0x38,0x30,0x20,0x20,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x04,0x04,0x0C,0x1C,0x38,0xF0,0xE0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x30,0x38,0x1C,0x0F,0x07,0x03,0x00,0x00,0x00,0x00,
    0x00,0x00,0x80,0x88,0x90,0xE0,0xE0,0xFC,0xFC,0xE0,0xE0,0x90,0x88,0x80,0x00,0x00,0x00,0x00,0x01,0x11,0x09,0x07,0x07,0x3F,0x3F,0x07,0x07,0x09,0x11,0x01,0x00,0x00,
    0x00,0x00,0x00,0x00,0x80,0x80,0x80,0xF0,0xF0,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x0F,0x0F,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x78,0x78,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0x70,0x38,0x1C,0x00,0x00,0x00,0x00,0x20,0x30,0x38,0x1C,0x0E,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0xF8,0xFC,0xFC,0x04,0x84,0xE4,0x74,0xFC,0xFC,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x2E,0x27,0x21,0x20,0x3F,0x3F,0x1F,0x00,0x00,0x00,
    0x00,0x00,0x00,0x60,0x60,0x60,0xF0,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x3F,0x3F,0x3F,0x20,0x20,0x20,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x18,0x1C,0x1C,0x04,0x04,0x84,0xCC,0xFC,0x78,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x38,0x3C,0x2E,0x27,0x23,0x21,0x38,0x38,0x38,0x00,0x00,0x00,
    0x00,0x00,0x00,0x18,0x1C,0x1C,0x84,0x84,0x84,0xCC,0x7C,0x78,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x38,0x38,0x21,0x21,0x21,0x33,0x3E,0x1E,0x0C,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0x60,0x30,0x18,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x23,0x23,0x3F,0x3F,0x3F,0x23,0x23,0x00,0x00,0x00,
    0x00,0x00,0x00,0xFC,0xFC,0xFC,0x84,0x84,0x84,0x84,0x84,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x39,0x39,0x21,0x21,0x21,0x33,0x3F,0x1F,0x0E,0x00,0x00,0x00,
    0x00,0x00,0x00,0xE0,0xF0,0xF8,0x9C,0x8C,0x84,0x84,0x84,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x21,0x21,0x21,0x21,0x3F,0x3F,0x1F,0x00,0x00,0x00,
    0x00,0x00,0x00,0x3C,0x3C,0x3C,0x04,0x04,0x04,0x04,0x84,0xFC,0xFC,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x3C,0x3E,0x07,0x03,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x78,0x7C,0xFC,0xC4,0xC4,0x84,0x84,0xFC,0x7C,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3E,0x3F,0x21,0x21,0x23,0x23,0x3F,0x3E,0x1E,0x00,0x00,0x00,
    0x00,0x00,0x00,0xF8,0xFC,0xFC,0x84,0x84,0x84,0x84,0xFC,0xFC,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x21,0x21,0x21,0x31,0x39,0x1F,0x0F,0x07,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x70,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x70,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x1E,0x1E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0xE0,0x70,0x38,0x1C,0x0E,0x06,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0E,0x1C,0x38,0x70,0x60,0x40,0x00,0x00,0x00,0x00,
    0x00,0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x00,0x00,0x00,0x00,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x00,0x00,
    0x00,0x00,0x00,0x02,0x06,0x0E,0x1C,0x38,0x70,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x60,0x70,0x38,0x1C,0x0E,0x07,0x03,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x18,0x1C,0x0C,0x0E,0x06,0x86,0xCE,0xFC,0x7C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x73,0x73,0x73,0x00,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0xFC,0xFE,0xFE,0x02,0x02,0xC2,0xC2,0xC2,0xFE,0xFE,0xFC,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x7F,0x60,0x60,0x63,0x63,0x63,0x63,0x43,0x03,0x00,0x00,
    0x00,0x00,0x00,0xE0,0xF0,0xF8,0x1C,0x0C,0x0C,0x1C,0xF8,0xF0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x02,0x02,0x02,0x02,0x3F,0x3F,0x3F,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x84,0x84,0x84,0xFC,0xFC,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x21,0x21,0x21,0x3F,0x3F,0x1E,0x00,0x00,0x00,
    0x00,0x00,0x00,0xF0,0xF8,0xFC,0x0C,0x04,0x04,0x04,0x1C,0x1C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x1F,0x3F,0x30,0x20,0x20,0x20,0x38,0x38,0x18,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x04,0x04,0x0C,0xFC,0xF8,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x20,0x20,0x30,0x3F,0x1F,0x0F,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x84,0x84,0x84,0xC4,0xCC,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x21,0x21,0x21,0x23,0x33,0x38,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x84,0x84,0x84,0xC4,0xCC,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x21,0x01,0x01,0x03,0x03,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xF0,0xF8,0xFC,0x0C,0x04,0x04,0x04,0x3C,0x3C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x1F,0x3F,0x30,0x20,0x22,0x22,0x3E,0x3E,0x3E,0x00,0x00,0x00,
    0x00,0x00,0x00,0xFC,0xFC,0xFC,0x80,0x80,0x80,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x01,0x01,0x01,0x3F,0x3F,0x3F,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x04,0x04,0xFC,0xFC,0xFC,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x3F,0x3F,0x20,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0xFC,0xFC,0xFC,0x04,0x04,0x00,0x00,0x00,0x00,0x1E,0x1E,0x3E,0x20,0x20,0x20,0x20,0x3F,0x3F,0x1F,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0xC0,0xE0,0x70,0x3C,0x1C,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x03,0x07,0x0E,0x3C,0x38,0x30,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x20,0x20,0x20,0x30,0x38,0x3C,0x00,0x00,0x00,
    0x00,0x00,0x00,0xFC,0xFC,0xFC,0x78,0xF0,0xE0,0xF0,0x78,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,0x01,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,
    0x00,0x00,0x00,0xFC,0xFC,0xFC,0x70,0xE0,0xC0,0x80,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,0x01,0x03,0x07,0x3F,0x3F,0x3F,0x00,0x00,
    0x00,0x00,0x00,0xE0,0xF0,0xF8,0x1C,0x0C,0x0C,0x0C,0x1C,0xF8,0xF0,0xE0,0x00,0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x38,0x30,0x30,0x30,0x38,0x1F,0x0F,0x07,0x00,0x00,

    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x84,0x84,0x84,0xFC,0xFC,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x21,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xE0,0xF8,0xF8,0x1C,0x0C,0x04,0x0C,0x1C,0xF8,0xF8,0xE0,0x00,0x00,0x00,0x00,0x00,0x07,0x1F,0x1F,0x18,0x18,0x5C,0x5E,0x7E,0x7F,0x7F,0x47,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x84,0x84,0x84,0xFC,0xFC,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x01,0x01,0x03,0x3F,0x3F,0x3C,0x00,0x00,0x00,
    0x00,0x00,0x00,0x78,0xFC,0xFC,0x84,0x84,0x84,0x84,0xBC,0x3C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x3C,0x3D,0x21,0x21,0x21,0x21,0x3F,0x3F,0x1E,0x00,0x00,0x00,
    0x00,0x00,0x00,0x1C,0x0C,0x04,0x04,0xFC,0xFC,0xFC,0x04,0x04,0x0C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x3F,0x3F,0x20,0x20,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x20,0x20,0x20,0x3F,0x3F,0x1F,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x38,0x30,0x38,0x1F,0x0F,0x07,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x80,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x03,0x0F,0x3F,0x3C,0x3C,0x0F,0x3C,0x3C,0x3F,0x0F,0x03,0x00,0x00,
    0x00,0x00,0x00,0x1C,0x3C,0x7C,0xE0,0xC0,0xE0,0x7C,0x3C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x3C,0x3E,0x07,0x03,0x07,0x3E,0x3C,0x38,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x7C,0xFC,0xFC,0x80,0x00,0x80,0xFC,0xFC,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x21,0x3F,0x3F,0x3F,0x21,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x3C,0x1C,0x0C,0x04,0x84,0xC4,0xE4,0x7C,0x3C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x3C,0x3E,0x27,0x23,0x21,0x20,0x30,0x38,0x3C,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x1C,0x38,0x70,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0E,0x1C,0x18,0x30,0x20,0x20,
    0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x20,0x3F,0x3F,0x3F,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x20,0x30,0x38,0x1C,0x0E,0x0E,0x1C,0x38,0x30,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,

    0x00,0x00,0x00,0x0C,0x0C,0x3C,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x3E,0x3E,0x22,0x22,0x22,0x3F,0x1F,0x3F,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x40,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x1F,0x3F,0x20,0x20,0x20,0x3F,0x3F,0x1F,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0xC0,0x40,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x20,0x20,0x20,0x39,0x39,0x19,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0xC0,0x40,0x40,0x44,0xFC,0xFC,0xFC,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x20,0x20,0x20,0x3F,0x1F,0x3F,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0xC0,0x40,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x22,0x22,0x22,0x3B,0x3B,0x1B,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0x80,0xF8,0xFC,0xFC,0x84,0x9C,0x9C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x21,0x3F,0x3F,0x3F,0x21,0x21,0x01,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0xC0,0x40,0x40,0x40,0xC0,0x80,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x47,0xCF,0xDF,0x98,0x98,0x98,0xFF,0xFF,0x7F,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x80,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x01,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x40,0x40,0x40,0xDC,0xDC,0xDC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x3F,0x3F,0x3F,0x20,0x20,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0xDC,0xDC,0xDC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x60,0xE0,0x80,0x80,0xC0,0xFF,0xFF,0x7F,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFC,0xFC,0xFC,0x00,0x00,0x80,0xC0,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x02,0x07,0x0F,0x3D,0x38,0x30,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x04,0x04,0x04,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x3F,0x3F,0x3F,0x20,0x20,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0xC0,0xC0,0xC0,0x40,0x40,0xC0,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,0x3F,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,
    0x00,0x00,0x00,0xC0,0xC0,0xC0,0x40,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0xC0,0x40,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x20,0x20,0x20,0x3F,0x3F,0x1F,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0x40,0xC0,0x80,0xC0,0x40,0x40,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0x90,0x10,0x10,0x1F,0x1F,0x0F,0x00,0x00,0x00,
    0x00,0x00,0x80,0xC0,0xC0,0x40,0x40,0x40,0xC0,0x80,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x1F,0x1F,0x10,0x10,0x90,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x40,0xC0,0xC0,0xC0,0x80,0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x3F,0x3F,0x21,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0xC0,0xC0,0x40,0x40,0x40,0x40,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x3B,0x23,0x26,0x26,0x26,0x3C,0x3D,0x19,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x40,0x40,0xE0,0xF0,0xF8,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x20,0x38,0x38,0x18,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x3F,0x3F,0x20,0x20,0x20,0x3F,0x1F,0x3F,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x38,0x30,0x38,0x1F,0x0F,0x07,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x07,0x0F,0x3F,0x38,0x38,0x0E,0x38,0x38,0x3F,0x0F,0x07,0x00,0x00,
    0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x39,0x3F,0x0F,0x0F,0x3F,0x39,0x30,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x87,0x8F,0x9F,0xD8,0xF8,0x78,0x3F,0x0F,0x07,0x00,0x00,0x00,
    0x00,0x00,0x00,0xC0,0xC0,0x40,0x40,0x40,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x38,0x3C,0x2E,0x27,0x23,0x31,0x38,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0x80,0xC0,0x78,0x7C,0x3C,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x03,0x1E,0x3E,0x3C,0x20,0x20,0x20,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFE,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x3C,0x7C,0x78,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x20,0x3C,0x3E,0x1E,0x03,0x01,0x01,0x00,0x00,0x00,
    0x00,0x00,0x38,0x3C,0x3C,0x04,0x0C,0x1C,0x38,0x30,0x20,0x3C,0x3C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


static Current_Font_s cfont;

static uint8_t buffer[64 * 128 / 8] =
{
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x0C,0x0C,0x0C,
    0x0C,0x0C,0x0C,0x00,0x00,0xC0,0xC0,0xC0,0x80,0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x80,
    0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0xFE,0xFE,0xFE,0x80,0xC0,0xC0,0xC0,
    0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,0x00,

    0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0x80,0xFE,0xFE,0xFE,0x00,0x00,0x00,
    0x80,0x80,0xC0,0xC0,0xC0,0xC0,0x80,0xFE,0xFE,0xFE,0x00,0x00,0x00,0x80,0x80,0xC0,
    0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0x80,
    0xFE,0xFE,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x83,0x83,0x83,
    0x83,0x83,0x80,0x00,0x00,0xFF,0xFF,0xFF,0x01,0x00,0x00,0x01,0xFF,0xFF,0xFF,0x01,
    0x00,0x00,0x01,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xC1,0x80,0x80,0x80,
    0xC1,0xFF,0xFF,0x3E,0x00,0x00,0x3E,0xFF,0xFF,0xCD,0x8C,0x8C,0x8C,0x8F,0xCF,0xCF,
    0x00,0x00,0x3E,0xFF,0xFF,0xC1,0x80,0x80,0x80,0xC1,0xFF,0xFF,0xFF,0x00,0x00,0x3E,
    0xFF,0xFF,0xC1,0x80,0x80,0x80,0xC1,0xFF,0xFF,0xFF,0x00,0x00,0x3E,0xFF,0xFF,0xCD,
    0x8C,0x8C,0x8C,0x8F,0xCF,0xCF,0x00,0x00,0x3E,0xFF,0xFF,0xC1,0x80,0x80,0x80,0xC1,
    0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,
    0x01,0x01,0x01,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,
    0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x01,0x01,0x01,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00,
    0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x01,0x01,0x00,0x00,0x00,
    0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,
    0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,
    0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0xFE,0xFE,
    0xFE,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,
    0xC0,0xC0,0xC0,0x80,0x80,0x00,0x00,0x00,0xC0,0xC0,0xC0,0x80,0xC0,0xC0,0xC0,0x00,
    0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,0x00,0x00,0xC0,0xC0,0xF8,0xF8,
    0xF8,0xC0,0xC0,0xC0,0x00,0x00,0x80,0x80,0xC0,0xC0,0xC0,0xC0,0xC0,0x80,0x80,0x00,
    0x00,0x00,0xC0,0xC0,0xC0,0x80,0xC0,0xC0,0xC0,0x40,0xC0,0xC0,0x80,0x00,0x00,0x00,
    0x00,0x80,0xC0,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x80,0x80,0x80,0x80,
    0x80,0x00,0x70,0xF9,0xFD,0x9C,0x8C,0x8C,0xCC,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,
    0xFF,0xC1,0x80,0x80,0x80,0xC1,0xFF,0xFF,0x3E,0x00,0x00,0x3E,0xFF,0xFF,0xC1,0x80,
    0x80,0x80,0xC1,0xFF,0xFF,0x3E,0x00,0x00,0xFF,0xFF,0xFF,0x03,0x01,0x01,0x01,0x00,
    0x00,0x70,0xF9,0xFD,0x9C,0x8C,0x8C,0xCC,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,
    0xFF,0x80,0x80,0x80,0x00,0x3E,0xFF,0xFF,0xC1,0x80,0x80,0x80,0xC1,0xFF,0xFF,0x3E,
    0x00,0x00,0xFF,0xFF,0xFF,0x03,0x01,0x01,0x01,0x00,0x03,0x0F,0x3F,0xFE,0xF8,0xC0,
    0xFC,0xFF,0x1F,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
    0x01,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x01,0x01,0x01,0x00,0x00,0x01,0x01,
    0x01,0x00,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,
    0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,
    0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
    0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x1D,0x1F,0x0F,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00


};


static void ssd1306_command( uint8_t command );
static void ssd1306_data( uint8_t value );
static uint8_t width( void );
static uint8_t height( void );
static void swap_num( uint16_t *a, uint16_t *b );
# 332 "OLED.c"
void OLED_Init( void )
{


    _delay((unsigned long)((100)*(4000000/4000.0)));
    ssd1306_command( 0xAE);
    ssd1306_command( 0xD5);
    ssd1306_command( 0x80);
    ssd1306_command( 0xA8 );
    ssd1306_command( 64 - 1 );
    ssd1306_command( 0xD3 );
    ssd1306_command(0x00);
    ssd1306_command( 0x40|0x00);
    ssd1306_command( 0x8D );

    ssd1306_command(0x14);
    ssd1306_command( 0x20 );
    ssd1306_command(0x00);
    ssd1306_command( 0xA0| 0x01);
    ssd1306_command( 0xC8 );
# 360 "OLED.c"
    ssd1306_command( 0xDA );
    ssd1306_command( 0x12 );
    ssd1306_command( 0x81 );

    ssd1306_command(0xCF);


    ssd1306_command( 0xD9 );

    ssd1306_command( 0xF1 );
    ssd1306_command( 0xDB );
    ssd1306_command( 0x40 );
    ssd1306_command( 0xA4 );
    ssd1306_command( 0xA6 );
    ssd1306_command( 0x2E );
    ssd1306_command( 0xAF );


    OLED_SetFont( SMALL_FONTS );

    _delay((unsigned long)((100)*(4000000/4000.0)));
}







uint8_t OLED_Width( void )
{
  return width();
}







uint8_t OLED_Height( void )
{
  return height();
}






void OLED_SetFont( const uint8_t *font)
{
  cfont.font = font;
  cfont.x_size = *(font+0);
  cfont.y_size = *(font+1);
  cfont.offset = *(font+2);
  cfont.numchars = *(font+3);
  cfont.inverted = 0;
}






void OLED_InvertFont( uint8_t invert_status )
{
  if( invert_status )
  {
    cfont.inverted = 1;
  }
  else
  {
    cfont.inverted = 0;
  }
}






void OLED_Update( void )
{
  uint16_t i = 0;
  uint8_t x = 0;
  ssd1306_command( 0x21 );
  ssd1306_command(0);
  ssd1306_command( 128 -1 );

  ssd1306_command( 0x22 );
  ssd1306_command(0);

    ssd1306_command(7);
# 462 "OLED.c"
  for (i=0; i<(128*64/8); i++)
  {

    I2C_Master_Start();
    I2C_Master_Write(0x3C << 1);
    I2C_Master_Write(0x40);
    for ( x=0; x<16; x++)
    {
      I2C_Master_Write(buffer[i]);
      i++;
    }
    i--;
    I2C_Master_Stop();
  }
}







void OLED_SetContrast( uint8_t contrast )
{
  ssd1306_command( 0x81 );
  ssd1306_command(contrast);
}






void OLED_ClearDisplay( void )
{
  memset(buffer, 0, (128*64/8));
}






void OLED_FillDisplay( void )
{
  memset(buffer, 0xFF, (128*64/8));
}







void OLED_InvertDisplay( uint8_t value )
{
  if( value )
  {
    ssd1306_command( 0xA7 );
  }
  else
  {
    ssd1306_command( 0xA6 );
  }
}
# 536 "OLED.c"
void OLED_DrawPixel( int16_t x, int16_t y, uint8_t color)
{
  if ( (x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  switch (color)
  {
    case 1: buffer[x+ (y/8)*128] |= (1 << (y&7)); break;
    case 0: buffer[x+ (y/8)*128] &= ~(1 << (y&7)); break;
    case 2: buffer[x+ (y/8)*128] ^= (1 << (y&7)); break;
  }
}
# 564 "OLED.c"
void OLED_Line( int16_t x_start, int16_t y_start, int16_t x_end, int16_t y_end, uint8_t color)
{
  int16_t x, y, addx, addy, dx, dy;
  int32_t P;
  int16_t i;
  dx = abs((int16_t)(x_end - x_start));
  dy = abs((int16_t)(y_end - y_start));
  x = x_start;
  y = y_start;

  if(x_start > x_end)
    addx = -1;
  else
    addx = 1;

  if(y_start > y_end)
    addy = -1;
  else
    addy = 1;

  if(dx >= dy)
  {
    P = 2*dy - dx;

    for(i=0; i<=dx; ++i)
    {
      OLED_DrawPixel (x,y,color);
      if(P < 0)
      {
        P += 2*dy;
        x += addx;
      }
      else
      {
        P += 2*dy - 2*dx;
        x += addx;
        y += addy;
      }
    }
  }
  else
  {
    P = 2*dx - dy;
    for(i=0; i<=dy; ++i)
    {
      OLED_DrawPixel (x,y,color);

      if(P < 0)
      {
        P += 2*dx;
        y += addy;
      }
      else
      {
        P += 2*dx - 2*dy;
        x += addx;
        y += addy;
      }
    }
  }
}
# 638 "OLED.c"
void OLED_V_Line ( int16_t y_start, int16_t y_end, int16_t x_pos, uint8_t color)
{
  int16_t temp;
  if( y_start > y_end )
  {
    temp = y_start;
    y_start = y_end;
    y_end = temp;
  }

  while( y_start <= y_end )
  {
    OLED_DrawPixel(x_pos, y_start, color);
    y_start++;
  }
}
# 666 "OLED.c"
void OLED_H_Line( int16_t x_start, int16_t x_end, int16_t y_pos, uint8_t color)
{
  int16_t temp;
  if( x_start > x_end )
  {
    temp = x_start;
    x_start = x_end;
    x_end = temp;
  }

  while( x_start <= x_end )
  {
    OLED_DrawPixel(x_start, y_pos, color);
    x_start++;
  }
}
# 698 "OLED.c"
void OLED_Rectangle( int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color)
{




  OLED_H_Line(x1, x2, y1, color);
  OLED_H_Line(x1, x2, y2, color);
  OLED_V_Line(y1, y2, x1, color);
  OLED_V_Line(y1, y2, x2, color);
}
# 721 "OLED.c"
void OLED_FillRectangle( int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color)
{
  int16_t i;
  for( i=x1; i<=x2; i++ )
  {
    OLED_V_Line(y1, y2, i, color );
  }
}
# 743 "OLED.c"
void OLED_Triangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color)
{
  OLED_Line(x0, y0, x1, y1, color);
  OLED_Line(x1, y1, x2, y2, color);
  OLED_Line(x2, y2, x0, y0, color);
}
# 759 "OLED.c"
void OLED_Image( const uint8_t *image)
{
  uint16_t i;
  for( i=0; i<(128*64/8); i++)
  {
    buffer[i] = *(image+i);
  }
}
# 780 "OLED.c"
void OLED_Circle( int16_t x0, int16_t y0, int16_t r, uint8_t color )
{
  int16_t f = 1 - r;
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x = 0;
  int16_t y = r;

  OLED_DrawPixel(x0 , y0+r, color);
  OLED_DrawPixel(x0 , y0-r, color);
  OLED_DrawPixel(x0+r, y0 , color);
  OLED_DrawPixel(x0-r, y0 , color);

  while (x<y)
  {
    if (f >= 0)
    {
      y--;
      ddF_y += 2;
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    f += ddF_x;

    OLED_DrawPixel(x0 + x, y0 + y, color);
    OLED_DrawPixel(x0 - x, y0 + y, color);
    OLED_DrawPixel(x0 + x, y0 - y, color);
    OLED_DrawPixel(x0 - x, y0 - y, color);
    OLED_DrawPixel(x0 + y, y0 + x, color);
    OLED_DrawPixel(x0 - y, y0 + x, color);
    OLED_DrawPixel(x0 + y, y0 - x, color);
    OLED_DrawPixel(x0 - y, y0 - x, color);
  }
}
# 825 "OLED.c"
void OLED_Write( int16_t x, int16_t y, char value )
{
  uint16_t font_idx = 0;
  uint16_t rowcnt = 0;
  uint16_t cnt = 0;
  uint8_t b;
  uint16_t temp = 0;

  int16_t cbyte, cx, cy;
  int16_t cbit;

  if( cfont.y_size%8 == 0)
  {
    font_idx = ((value-cfont.offset)*(cfont.x_size*(cfont.y_size/8))) + 4;
    for ( rowcnt=0; rowcnt<(cfont.y_size/8); rowcnt++ )
    {
      for( cnt=0; cnt<cfont.x_size; cnt++ )
      {
        temp = *(cfont.font + font_idx + cnt + (rowcnt*cfont.x_size));
        for ( b=0; b<8; b++ )
        {
          if ( temp & (1<<b) )
          {
            if (cfont.inverted == 0 )
              OLED_DrawPixel(x+cnt, y+(rowcnt*8)+b, 1);
            else
              OLED_DrawPixel(x+cnt, y+(rowcnt*8)+b, 0);
          }
          else
          {
            if (cfont.inverted == 0 )
              OLED_DrawPixel(x+cnt, y+(rowcnt*8)+b, 0);
            else
              OLED_DrawPixel(x+cnt, y+(rowcnt*8)+b, 1);
          }
        }
      }
    }
  }
  else
  {
    font_idx = ((value-cfont.offset)*((cfont.x_size*cfont.y_size)/8)) + 4;
    cbyte = *(cfont.font + font_idx);
    cbit = 7;
    for ( cx=0; cx<cfont.x_size; cx++ )
    {
      for ( cy=0; cy<cfont.y_size; cy++ )
      {
        if ( (cbyte & (1<<cbit)) != 0)
        {
          if ( cfont.inverted == 0 )
            OLED_DrawPixel(x+cx, y+cy, 1);
          else
            OLED_DrawPixel(x+cx, y+cy, 0);
        }
        else
        {
          if ( cfont.inverted == 0 )
            OLED_DrawPixel(x+cx, y+cy, 0);
          else
            OLED_DrawPixel(x+cx, y+cy, 1);
        }
        cbit--;
        if (cbit < 0)
        {
          cbit=7;
          font_idx++;
          cbyte= *(cfont.font+font_idx);
        }
      }
    }
  }
}
# 908 "OLED.c"
void OLED_Write_Text( int16_t x, int16_t y, char *text)
{
  uint8_t cnt;
  uint8_t length;

  length = strlen( (const char*)text);
  if (x == 254)
    x = 128-(length*cfont.x_size);
  if (x == 255)
    x = (128-(length*cfont.x_size))/2;

  for ( cnt=0; cnt<length; cnt++ )
    OLED_Write(x + (cnt*(cfont.x_size)), y, *text++ );
}






static void ssd1306_command( uint8_t command )
{
  uint8_t control = 0x00;
  I2C_Master_Start();
  I2C_Master_Write(0x3C << 1);
  I2C_Master_Write(control);
  I2C_Master_Write(command);
  I2C_Master_Stop();
}






static void ssd1306_data( uint8_t value )
{
  uint8_t control = 0x40;
  I2C_Master_Start();
  I2C_Master_Write( 0x3C << 1);
  I2C_Master_Write(control);
  I2C_Master_Write(value);
  I2C_Master_Stop();
}






static uint8_t width( void )
{
  return 128;
}






static uint8_t height( void )
{
  return 64;
}
# 981 "OLED.c"
static void swap_num( uint16_t *a, uint16_t *b )
{
  uint16_t temp = *a;
  *a = *b;
  *b = temp;
}
